## Spring Boot with Database Properties
spring.datasource.url=jdbc:mysql://order_db:3306/OrderDB
spring.datasource.username=orderdb
spring.datasource.password=orderdbpassword

## Handles Database Connection: Causes Spring to continue trying connecting to Database if 
## database not found
spring.datasource.continue-on-error= true
spring.datasource.initialization-mode = never
spring.datasource.dbcp2.initial-size = 0
spring.datasource.dbcp2.time-between-eviction-runs-millis= 5000
spring.datasource.dbcp2.min-evictable-idle-time-millis = 5000
spring.datasource.dbcp2.min-idle = 0

## Configuration with JPA
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = none
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.hbm2ddl.auto = none
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false

## RabbitMQ Configuration
server.port = 8080

spring.rabbitmq.host=host.docker.internal
spring.rabbitmq.port=5673
spring.rabbitmq.username=rabbit
spring.rabbitmq.password=tibbar
# To get Spring to continue attempting to connect with RabbitMQ Broker
spring.rabbitmq.connection-timeout = 0

## OrderSender Queue, Exchange and Key Name
order.rabbitmq.exchange=send_order_exchange
order.rabbitmq.queue=send_order_queue
order.rabbitmq.routingkey=send_order_key

## OrderReceiver Queue, Exchange and Key Name
receive.rabbitmq.queue=receive_order_queue
receive.rabbitmq.routingkey=receive_order_key
receive.rabbitmq.exchange=receive_order_exchange

spring.main.allow-bean-definition-overriding=true


